# frozen_string_literal: true

class App::MalwaresController < ApplicationController
  before_action :set_malware, only: %i[show edit update destroy]

  # GET /app/malwares or /app/malwares.json
  def index
    @malwares = Malware.order(created_at: :desc).page(params[:page]).per(13)
  end

  # GET /app/malwares/1 or /app/malwares/1.json
  def show
  end

  # GET /app/malwares/new
  def new
    @malware = Malware.new
  end

  # GET /app/malwares/1/edit
  def edit
  end

  # POST /app/malwares or /app/malwares.json
  def create
    @malware = Malware.new(malware_params)

    respond_to do |format|
      if @malware.save_changes
        format.html { redirect_to [:app, @malware], notice: "Malware was successfully created." }
        format.json { render :show, status: :created, location: @malware }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @malware.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /app/malwares/1 or /app/malwares/1.json
  def update
    respond_to do |format|
      if @malware.update(malware_params)
        format.html { redirect_to [:app, @malware], notice: "Malware was successfully updated." }
        format.json { render :show, status: :ok, location: @malware }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @malware.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /app/malwares/1 or /app/malwares/1.json
  def destroy
    @malware.destroy!

    respond_to do |format|
      format.html { redirect_to app_malwares_path, status: :see_other, notice: "Malware was successfully destroyed." }
      format.json { head :no_content }
    end
  end

  private

  # Use callbacks to share common setup or constraints between actions.
  def set_malware
    @malware = Malware.find(params.expect(:id))
  end

  # Only allow a list of trusted parameters through.
  def malware_params
    params.expect(malware: %i[malware_id name])
  end
end
